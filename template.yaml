AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'dius.com.au Chatbot'
Parameters:
  LexProvisionerFunctionArn:
    Type: String
    Description: the ARN of the custom resource (this is an output of the previous
      CloudFormation stack)
    Default: 'arn:aws:lambda:us-east-1:773592622512:function:lex-provisioner-LexProvisioner-11UR1ZOI224RM'
  NamePrefix:
    Type: String
    Description: Prefix to add to Lex resource names
    Default: "elliotttest"
    MinLength: 3
    MaxLength: 32
    AllowedPattern: '^[a-zA-Z\._]+$'
    ConstraintDescription: Must conform with the permitted Lex Bot name pattern.
  owner:
    Type: String
    Description: Internal tags for monitoring users on internal aws account
    Default: emurray@dius.com.au
    MinLength: 3
    MaxLength: 32
  expiryDate:
    Type: String
    Description: Internal tags for monitoring expiry date on internal aws account
    Default: 2019-05-04
    MinLength: 3
    MaxLength: 32
  purpose:
    Type: String
    Description: Internal tags for monitoring purpose on internal aws account
    Default: Developing tools for chatbots
    MinLength: 3
    MaxLength: 128
Resources:
  # custom resource to manage lex bot
  LexBot:
    Type: Custom::LexBot
    Properties:
      ServiceToken: !ImportValue 'lex-provisioner-LexProvisioner'
      NamePrefix: !Ref NamePrefix
      loglevel: 'info'
      description: 'elliott test bot'
      dialogCodeHookUri: greetingCodeHook
      locale: 'en-US'
      clarification:
        message: 'clarification statement'
      abortStatement:
        message: 'abort statement'
      intents:
        - Name: 'greeting'
          Codehook: !GetAtt greetingCodeHook.Arn
          Plaintext:
            confirmation: 'Confirmation meessage'
            rejection: 'Can not understand you'
            followUpPrompt: 'Anything else?'
            followUpRejection: 'I cannot finish this chat'
            confirmation: 'Here is your result'
      intents:
        - Name: 'greeting'
          Codehook: 'thankyouCodeHook'
          maxAttempts: '3'
          Plaintext:
            confirmation: 'confirmation'
            rejection: 'rejection'
            conclusion: 'conclusion'
      test:
        embed: works
    DependsOn:
      - greetingCodeHook
  greetingCodeHook:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${NamePrefix}greetingCodeHook"
      Handler: greeting/index.handler
      Runtime: nodejs8.10
      CodeUri: src/
      Description: Validate request for 'greeting'
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt LexLambdaRole.Arn
      Tags:
        owner: !Ref owner
        expiryDate: !Ref expiryDate
        purpose: !Ref purpose
    DependsOn:
      - LexLambdaRole
  LexLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${NamePrefix}LexLambdaInteraction"
      Path: '/service-role/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  LogsForLambda:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${NamePrefix}-LogsForLexLambda"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
      Roles:
        - Ref: LexLambdaRole
Outputs:
  BotName:
    Description: Lex Bot Name
    Value: !Sub "${LexBot.BotName}"
  BotVersion:
    Description: Lex Bot version
    Value: !Sub "${LexBot.BotVersion}"
